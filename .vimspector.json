{
  "configurations": {
    "rust:launch": {
      "adapter": "CodeLLDB",
      "filetypes": ["rust"],
      "configuration": {
        "request": "launch",
        "program": "${Executable}",
        // "args": ["${Args}"],
        "stopAtEntry": true,
        "cwd": "${workspaceRoot}",
        "environment": [],
        "externalConsole": true
      }
    },
    "go:launch": {
      "adapter": "vscode-go",
      "filetypes": ["go"],
      "configuration": {
        "request": "launch",
        "program": "${fileDirname}",
        "mode": "debug",
        "dlvToolPath": "$HOME/go/bin/dlv",
        "dlvFlags": ["--check-go-version=false"]
      }
    },
    "cpp:launch": {
      "adapter": "vscode-cpptools",
      "filetypes": ["cpp", "c", "objc", "rust"],
      "configuration": {
        "name": "cpp",
        "type": "cppdbg",
        "request": "launch",
        "program": "${fileDirname}/${fileBasenameNoExtension}",
        "args": ["*${ProgramArgs}"],
        "cwd": "${workspaceRoot}",
        "environment": [],
        "externalConsole": true,
        "stopAtEntry": true,
        "MIMode": "gdb",
        "setupCommands": [
          {
            "description": "Enable pretty-printing for gdb",
            "text": "-enable-pretty-printing",
            "ignoreFailures": true
          },
          {
            "description]": "in this mode gdb will be attach to child fprocesss after a call to fork()",
            "text": "-gdb-set detach-on-fork off",
            "ignoreFailures": true
          },
          {
            "description": "The new process is debugged after a fork. The parent process runs unimpeded.",
            "text": "-gdb-set follow-fork-mode child",
            "ignoreFailures": true
          }
        ],
        "logging": {
          "engineLogging": false
        }
      }
    },
    "cpp:attach": {
      "adapter": "vscode-cpptools",
      "filetypes": ["cpp", "c", "objc", "rust"],
      "configuration": {
        "name": "cpp",
        "type": "cppdbg",
        "request": "attach",
        "program": "${fileDirname}/${fileBasenameNoExtension}",
        "MIMode": "gdb",
        "setupCommands": [
          {
            "description": "Enable pretty-printing for gdb",
            "text": "-enable-pretty-printing",
            "ignoreFailures": true
          },
          {
            "description]": "in this mode gdb will be attach to child fprocesss after a call to fork()",
            "text": "-gdb-set detach-on-fork off",
            "ignoreFailures": true
          },
          {
            "description": "The new process is debugged after a fork. The parent process runs unimpeded.",
            "text": "-gdb-set follow-fork-mode child",
            "ignoreFailures": true
          }
        ]
      }
    },
    "c:lldb": {
      "adapter": "CodeLLDB",
      "filetypes": ["cpp", "c", "objc", "rust"],
      "breakpoints": {
        "exception": {
          "cpp_throw": "Y",
          "cpp_catch": "N"
        }
      },
      "configuration": {
        "request": "launch",
        "program": "${fileDirname}/${fileBasenameNoExtension}",
        // "initCommands": ["command script import ${workspaceRoot}/debugvis.py"],
        "stopAtEntry": true,
        // "MIMode": "lldb", // 指定连接的调试器，可以为gdb或lldb，因为使用llvm工具链，所以使用lldb
        "setupCommands": [
          {
            // 模板自带，好像可以更好地显示STL容器的内容
            "description": "Enable pretty-printing for lldb",
            "text": "-enable-pretty-printing",
            "ignoreFailures": true
          }
        ],
        "cwd": "${workspaceRoot}",
        "args": ["*${ProgramArgs}"]
      }
    },
    "python: Launch": {
      "adapter": "debugpy",
      "filetypes": ["python"],
      "configuration": {
        "name": "python: Launch",
        "type": "python",
        "request": "launch",
        "cwd": "$workspaceRoot",
        "python": "/opt/homebrew/opt/python3/bin/python3",
        "stopOnEntry": true,
        "console": "externalTerminal",
        "debugOptions": [],
        "program": "./py/csvparse.py"
      }
    },
    "go:run": {
      "adapter": "delve",
      "filetypes": ["go"], // optional
      "variables": {
        // example, to disable delve's go version check
        "dlvFlags": "--check-go-version=false"
      },
      "configuration": {
        "request": "launch",
        "program": "${fileDirname}/${fileBasenameNoExtension}",
        "mode": "debug",
        "cwd": "$workspaceRoot"
      }
    }
  }
}
