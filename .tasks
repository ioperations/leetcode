# vim: set fenc=utf-8 ft=dosini:
# define a new task named "file-build"
[bench-fmt]
# shell command, use quotation for filenames containing spaces
# check ":AsyncTaskMacro" to see available macros
command=:AsyncRun -mode=term -pos=floaterm -position=bottomright -width=0.3  -height=0.6 clang++ "$(VIM_FILEPATH)" -g -std=c++17 -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)" -lfmt -lbenchmark -lgtest && ./$(VIM_FILENOEXT) 
# working directory, can change to $(VIM_ROOT) for project root
cwd=$(VIM_ROOT)
# output mode, can be one of quickfix and terminal
# - quickfix: output to quickfix window
# - terminal: run the command in the internal terminal
output=quickfix
# this is for output=quickfix only
# if it is omitted, vim's current errorformat will be used.
errorformat=%f:%l:%m
# save file before execute
save=1
#
# define a new task named "file-build"
[file-build]
# shell command, use quotation for filenames containing spaces
# check ":AsyncTaskMacro" to see available macros
command=:AsyncRun -mode=term -pos=floaterm -position=bottomright -width=0.6  -height=0.6 clang++ "$(VIM_FILEPATH)" -g -std=c++17 -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)" -lopencv_videoio -I/usr/include/opencv4 && ./$(VIM_FILENOEXT)
# working directory, can change to $(VIM_ROOT) for project root
cwd=$(VIM_ROOT)
# output mode, can be one of quickfix and terminal
# - quickfix: output to quickfix window
# - terminal: run the command in the internal terminal
output=quickfix
# this is for output=quickfix only
# if it is omitted, vim's current errorformat will be used.
errorformat=%f:%l:%m
# save file before execute
save=1
# define a new task named "file-build"
[kaleidoscope]
# shell command, use quotation for filenames containing spaces
# check ":AsyncTaskMacro" to see available macros
command=clang++ -g "$(VIM_FILEPATH)" `llvm-config --cxxflags --ldflags --system-libs --libs all` -O3 -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)" 
# working directory, can change to $(VIM_ROOT) for project root
cwd=$(VIM_ROOT)
# output mode, can be one of quickfix and terminal
# - quickfix: output to quickfix window
# - terminal: run the command in the internal terminal
output=quickfix
# this is for output=quickfix only
# if it is omitted, vim's current errorformat will be used.
errorformat=%f:%l:%m
# save file before execute
save=1
[event_test]
# shell command, use quotation for filenames containing spaces
# check ":AsyncTaskMacro" to see available macros
command=:AsyncRun -mode=term -pos=floaterm -position=bottomright -width=0.5  -height=0.6 clang++  -fsanitize=address -g "$(VIM_FILEPATH)" -ggdb3 -O3 -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)"  -levent && "${VIM_FILEDIR}/${VIM_FILENOEXT}"
# working directory, can change to $(VIM_ROOT) for project root
cwd=$(VIM_ROOT)
# output mode, can be one of quickfix and terminal
# - quickfix: output to quickfix window
# - terminal: run the command in the internal terminal
output=quickfix
# this is for output=quickfix only
# if it is omitted, vim's current errorformat will be used.
errorformat=%f:%l:%m
# save file before execute
save=1

